from modules.modules_2D import ResidualBlock2D, AttentionBlock2D
import torch.nn as nn
import torch


class RA_UNet_1(nn.Module):
    def __init__(self):
        super(RA_UNet_1, self).__init__()
        self.conv1 = nn.Conv2d(1,16,(3,3),padding=1)
        self.pool1 = nn.MaxPool2d(2)
        self.res1 = ResidualBlock2D(16,16)
        self.pool2 = nn.MaxPool2d(2)
        self.res2 = ResidualBlock2D(16,32)
        self.pool3 = nn.MaxPool2d(2)
        self.res3 = ResidualBlock2D(32,64)
        self.pool4 = nn.MaxPool2d(2)
        self.res4 = ResidualBlock2D(64,128)
        self.pool5 = nn.MaxPool2d(2)
        self.res5 = ResidualBlock2D(128,256)
        self.res6 = ResidualBlock2D(256,256)
        self.up1 = nn.Upsample(scale_factor=2)
        self.att1 = AttentionBlock2D(128,128,0)
        self.res7 = ResidualBlock2D(384,128)
        self.up2 = nn.Upsample(scale_factor=2)
        self.att2 = AttentionBlock2D(64,64,1)
        self.res8 = ResidualBlock2D(192,64)
        self.up3 = nn.Upsample(scale_factor=2)
        self.att3 = AttentionBlock2D(32,32,2)
        self.res9 = ResidualBlock2D(96,32)
        self.up4 = nn.Upsample(scale_factor=2)
        self.att4 = AttentionBlock2D(16,16,3)
        self.res10 = ResidualBlock2D(48,16)
        self.up5 = nn.Upsample(scale_factor=2)
        self.conv2 = nn.Conv2d(32,16,(3,3),padding=1)
        self.conv3 = nn.Conv2d(16,1,(3,3),padding=1)

    def forward(self, input):
        conv1 = self.conv1(input)
        x = self.pool1(conv1)
        res1 = self.res1(x)
        x = self.pool2(res1)
        res2 = self.res2(x)
        x = self.pool3(res2)
        res3 = self.res3(x)
        x = self.pool4(res3)
        res4 = self.res4(x)
        x = self.pool5(res4)
        x = self.res5(x)
        x = self.res6(x)
        up1 = self.up1(x)
        att1 = self.att1(res4)
        x = torch.cat((up1,att1),dim=1)
        x = self.res7(x)
        up2 = self.up2(x)
        att2 = self.att2(res3)
        x = torch.cat((up2,att2),dim=1)
        x = self.res8(x)
        up3 = self.up3(x)
        att3 = self.att3(res2)
        x = torch.cat((up3,att3),dim=1)
        x = self.res9(x)
        up4 = self.up4(x)
        att4 = self.att4(res1)
        x = torch.cat((up4,att4),dim=1)
        x = self.res10(x)
        up5 = self.up5(x)
        x = torch.cat((up5,conv1),dim=1)
        x = self.conv2(x)
        x = self.conv3(x)

        return x

if __name__ == "__main__":
    input = torch.rand(1, 1, 256, 256)
    print("input_size:", input.size())
    model = RA_UNet_1()
    ouput = model(input)
    print("output_size:", ouput.size())